#!/usr/bin/env python3
import platform
import sys, os
import gi
gi.require_version('Gtk', '4.0')
gi.require_version('Adw', '1')
from gi.repository import Gtk, Gdk, Adw
import yaml, argparse, random, datetime, string
if platform.system() == 'Linux':
    print("Linux good")
    from pathlib import Path
else:
    print("Windows or smth bad")
    import userpath
dir_path = os.path.dirname(os.path.realpath(__file__))
os.chdir(dir_path)
css_provider = Gtk.CssProvider()
css_provider.load_from_path('style.css')
Gtk.StyleContext.add_provider_for_display(Gdk.Display.get_default(), css_provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)
class App(Adw.Application):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.connect("activate", self.on_activate)
    def on_activate(self,app):
        self.win = MainWindow(application=app)
        self.win.present()
class MainWindow(Gtk.ApplicationWindow):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.set_title("Flex")
        self.scrolled = True
        self.menu()
    def menu(self, *args, **kwargs):
        self.menubox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        self.set_child(self.menubox)
        self.title = Gtk.Label(label="Flex Box Meter")
        self.menubox.append(self.title)
        for key, value in conf.items():
            if any(ch not in string.ascii_letters for ch in key):
                print(f"{key} is not properly saved")
                continue
            exec(f"self.{key}box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)")
            exec(f"self.{key}lab = Gtk.Label(label='{key}')")
            exec(f"self.{key}box.append(self.{key}lab)")
            exec(f"self.{key}flex = Gtk.CenterBox(orientation=Gtk.Orientation.HORIZONTAL)")
            exec(f"self.{key}box.append(self.{key}flex)")
            exec(f"self.{key}gbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL)")
            exec(f"self.{key}flex.set_center_widget(self.{key}gbox)")
            for s in range(1, 53):
                exec(f"self.w{key}{s} = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)")
                exec(f"self.{key}gbox.append(self.w{key}{s})")
                for i in range(1, 8):
                    self.sssasd = Gtk.Label(label=i)
                    exec(f"self.w{key}{s}.append(self.sssasd)")
            #for k, v in value.items():
            #    exec(f"self.{key}val = Gtk.Label(label='{k} {v}|')")
            #    exec(f"self.{key}flex.append(self.{key}val)")
            exec(f"self.menubox.append(self.{key}box)")
            exec(f"self.{key}but = Gtk.Button(label='Add')")
            exec(f"self.{key}but.connect('clicked', self.add, key)")
            exec(f"self.menubox.append(self.{key}but)")
    def add(self, obj, key, *args, **kwargs):
        try:
            t = conf[key][time]+1
            conf[key][time] = t
            with open(path, "w") as f:
                yaml.dump(conf, f, allow_unicode=True, sort_keys=False)
            self.menu()
        except KeyError:
            conf[key].update({time: 1})
            with open(path, "w") as f:
                yaml.dump(conf, f, allow_unicode=True, sort_keys=False)
            self.menu()
if __name__ == "__main__":
    time = datetime.datetime.now().strftime("%Y.%m.%d")
    datime = datetime.date.today()
    if platform.system() == "Linux":
        path = f"{Path.home()}/.config/flex.yaml"
    else:
        path = f"{userpaths.get_my_documents()}/flex.yaml"
    try:
        with open(path, "r") as f:
            conf = yaml.load(f, Loader=yaml.FullLoader)
        with open(path, "r") as f:
            conf = yaml.load(f, Loader=yaml.FullLoader)
    except FileNotFoundError:
        print("No config file")
        with open(path, 'w+') as f:
            conf = {"example": {time: "1"}}
            yaml.dump(conf, f, allow_unicode=True, sort_keys=False)
    app = App(application_id="io.github.wilwe.flexmeter")
    app.run()
