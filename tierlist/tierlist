#!/usr/bin/env python3
import os, subprocess, argparse, random, yaml
import gi
gi.require_version('Gtk', '4.0')
gi.require_version('Adw', '1')
from gi.repository import Gtk, Gdk, Adw, GdkPixbuf
from pathlib import Path
dir_path = os.path.dirname(os.path.realpath(__file__))
os.chdir(dir_path)
css_provider = Gtk.CssProvider()
css_provider.load_from_path('style.css')
Gtk.StyleContext.add_provider_for_display(Gdk.Display.get_default(), css_provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)
class MainWindow(Gtk.ApplicationWindow):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.menu()
    def menu(self, *args, **kwargs):
        self.mainbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        self.set_child(self.mainbox)
        self.newbutt = Gtk.Button(label="New tierlist")
        self.newbutt.connect('clicked', self.new)
        self.mainbox.append(self.newbutt)
    def new(self, *args, **kwargs):
        self.tierlist()
    def tierlist(self, *args, **kwargs):
        self.mainbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        self.set_child(self.mainbox)
        self.title = Gtk.Label(label="Title placecholder")
        self.mainbox.append(self.title)
        tiers = ["s", "a", "b", "c", "d", "f"]
        for tier in tiers:
            exec(f"self.tier{tier} = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL)")
            exec(f"self.mainbox.append(self.tier{tier})")
            exec(f"self.tier{tier}nbox = Gtk.Label(label=tier, hexpand=False)")
            exec(f"self.tier{tier}.append(self.tier{tier}nbox)")
            exec(f"self.tier{tier}items = Gtk.FlowBox(orientation=Gtk.Orientation.HORIZONTAL, hexpand=True, vexpand=True)")
            exec(f"self.tier{tier}.append(self.tier{tier}items)")
            exec(f"self.tier{tier}items.connect('child-activated', self.unselect, '{tier}')")
            exec(f"self.mainbox.append(self.tier{tier})")
        self.entry = Gtk.Entry()
        self.entry.set_placeholder_text("Tiers")
        self.entry.connect("activate", self.changetier)
        self.mainbox.append(self.entry)
    def unselect(self, obj, chuj, tier, *args, **kwargs):
        exec(f"self.tier{tier}items.unselect_all()")
    def changetier(self, *args, **kwargs):
        tier = self.entry.get_text()
        self.chuj = Gtk.Label(label="chuj")
        exec(f"self.tier{tier}items.append(self.chuj)")
class App(Adw.Application):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.connect("activate", self.on_activate)
    def on_activate(self,app):
        self.win = MainWindow(application=app)
        self.win.present()
def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-f", "--file", help="Define file")
    parser.add_argument("-t", "--tiers", help="Define Tiers", nargs="*")
    args = parser.parse_args()
def read_items(file_path):
    with open(file_path, 'r') as file:
        items = [line.strip() for line in file]
    return items
#if args.tiers != None:
#    tiers = [f"{colors[random.randrange(len(colors))] if args.tiers.index(i) >= len(colors) else colors[args.tiers.index(i)]}| {i} |\033[0m" for i in args.tiers]
#    yam = {f"{tier}": [] for tier in args.tiers}
#else:
#    tiers = ["\033[48;2;243;139;168;30m| S |\033[0m","\033[48;2;250;179;135;30m| A |\033[0m","\033[48;2;249;226;175;30m| B |\033[0m","\033[48;2;166;227;161;30m| C |\033[0m","\033[48;2;148;226;213;30m| D |\033[0m","\033[48;2;137;180;250;30m| F |\033[0m"]
#    yam = {"S": [], "A": [], "B": [], "C": [], "D": [], "F": []}
#if args.file == None:
#    file = str(subprocess.check_output(["zenity", "--file-selection"]))
#    file = file.strip("b'").strip("\\n'")
#else:
#    file = args.file
#print("\033c")
#items = read_items(file)
#for tier in range(len(tiers)):
#    print ("\033[31m—————————————————————————————————————————————\033[0m")
#    print(tiers[tier])
#print ("\033[31m—————————————————————————————————————————————\033[0m")
#for i in items:
#    print (i)
#    if i == items[-1]:
#        print("Last")
#    try:
#        x = str(input('Tier: '))
#    except:
#        askforsave(yam)
#        exit()
#    if x in ['exit',':q']:
#        break
#    print("\033c")
#    if args.tiers != None:
#        for tier in range(len(args.tiers)):
#            if x.lower() == args.tiers[tier].lower():
#                tiers[tier] += f" {i} |"
#                yam[args.tiers[tier]].append(i)
#            print ("\033[31m—————————————————————————————————————————————\033[0m")
#            print(tiers[tier])
#        print ("\033[31m—————————————————————————————————————————————\033[0m")
#    else:
#        if x.lower() == 's':
#            tiers[0] += f" {i} |"
#            yam["S"].append(i)
#        if x.lower() == 'a':
#            tiers[1] += f" {i} |"
#            yam["A"].append(i)
#        if x.lower() == 'b':
#            tiers[2] += f" {i} |"
#            yam["B"].append(i)
#        if x.lower() == 'c':
#            tiers[3] += f" {i} |"
#            yam["C"].append(i)
#        if x.lower() == 'd':
#            tiers[4] += f" {i} |"
#            yam["D"].append(i)
#        if x.lower() == 'f':
#            tiers[5] += f" {i} |"
#            yam["F"].append(i)
#        print ("\033[31m—————————————————————————————————————————————\033[0m")
#        print (tiers[0])
#        print ("\033[31m—————————————————————————————————————————————\033[0m")
#        print (tiers[1])
#        print ("\033[31m—————————————————————————————————————————————\033[0m")
#        print (tiers[2])
#        print ("\033[31m—————————————————————————————————————————————\033[0m")
#        print (tiers[3])
#        print ("\033[31m—————————————————————————————————————————————\033[0m")
#        print (tiers[4])
#        print ("\033[31m—————————————————————————————————————————————\033[0m")
#        print (tiers[5])
#        print ("\033[31m—————————————————————————————————————————————\033[0m")
#asktosave(yam)
if __name__ == "__main__":
    app = App(application_id="io.github.wilwe.tierlist")
    app.run()
