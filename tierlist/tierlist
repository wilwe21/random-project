#!/usr/bin/env python3
import os, subprocess, argparse, random, yaml
import gi
gi.require_version('Gtk', '4.0')
gi.require_version('Adw', '1')
from gi.repository import Gtk, Gdk, Adw
from pathlib import Path
dir_path = os.path.dirname(os.path.realpath(__file__))
os.chdir(dir_path)
css_provider = Gtk.CssProvider()
css_provider.load_from_path('style.css')
Gtk.StyleContext.add_provider_for_display(Gdk.Display.get_default(), css_provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)
class MainWindow(Gtk.ApplicationWindow):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.menu()
    def menu(self, *args, **kwargs):
        self.mainbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        self.set_child(self.mainbox)
        self.newbutt = Gtk.Button(label="New tierlist")
        self.newbutt.connect('clicked', self.new)
        self.mainbox.append(self.newbutt)
    def new(self, *args, **kwargs):
        self.tierlist()
    def tierlist(self, *args, **kwargs):
        self.mainbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        self.set_child(self.mainbox)
        self.title = Gtk.Label(label="Title placecholder")
        self.mainbox.append(self.title)
        tiers = ["s", "a", "b", "c", "d", "f"]
        colors = ["red","orange","lime","green","teal","blue"]
        c = 0
        for tier in tiers:
            exec(f"self.tier{tier} = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL)")
            exec(f"self.mainbox.append(self.tier{tier})")
            exec(f"self.tier{tier}nbox = Gtk.CenterBox(hexpand=False)")
            exec(f"self.tier{tier}nlab = Gtk.Label(label=tier, hexpand=False)")
            exec(f"self.tier{tier}nbox.set_center_widget(self.tier{tier}nlab)")
            exec(f"self.tier{tier}nbox.set_css_classes([colors[c]])")
            exec(f"self.tier{tier}.append(self.tier{tier}nbox)")
            exec(f"self.tier{tier}items = Gtk.FlowBox(orientation=Gtk.Orientation.HORIZONTAL, hexpand=True)")
            exec(f"self.tier{tier}items.set_selection_mode(False)")
            exec(f"self.tier{tier}items.set_min_children_per_line(20)")
            exec(f"self.tier{tier}items.set_homogeneous(False)")
            exec(f"self.tier{tier}.append(self.tier{tier}items)")
            exec(f"self.mainbox.append(self.tier{tier})")
            c += 1
        self.entry = Gtk.Entry()
        self.entry.set_placeholder_text("Tiers")
        self.entry.connect("activate", self.changetier)
        self.mainbox.append(self.entry)
    def changetier(self, *args, **kwargs):
        tier = self.entry.get_text()
        self.chuj = Gtk.Image.new_from_file("/home/wilwe/Obrazy/Screenshots/tusk.png")
        exec(f"self.tier{tier}items.append(self.chuj)")
class App(Adw.Application):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.connect("activate", self.on_activate)
    def on_activate(self,app):
        self.win = MainWindow(application=app)
        self.win.present()
def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-f", "--file", help="Define file")
    parser.add_argument("-t", "--tiers", help="Define Tiers", nargs="*")
    args = parser.parse_args()
def read_items(file_path):
    with open(file_path, 'r') as file:
        items = [line.strip() for line in file]
    return items
if __name__ == "__main__":
    app = App(application_id="io.github.wilwe.tierlist")
    app.run()
